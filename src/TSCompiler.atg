$namespace=TSCompiler

#include "wchar.h"

COMPILER TSCompiler
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  hexdigit = digit + "ABCDEF".
  stringchar = ANY - '\"'.
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  hexnumber = "0x" hexdigit { hexdigit } .
  intent = tab .
  string  = "\"" {stringchar} "\"".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf		//win32: TO cr lf
COMMENTS FROM "##" TO lf		//win32: TO cr lf

IGNORE cr + lf 

/*------------------------------------------------------------------------*/

PRODUCTIONS

/*------------------------------------------------------------------------*/
VersionNum = number 	(. QString versNum( coco_qstring_create(t->val) ); .)
			{ 
			"." 		
			number 		(. versNum.append( coco_qstring_create(t->val) ); .)
			}			(. if (versNum != data->version() )
							{
								errors->Error( QString("Using false TSCompiler version") );
								//data->quit();
							}
						.)
			.

/*------------------------------------------------------------------------*/
String<QString *current> =  
						{ 
						string		(. current->append(coco_qstring_create(t->val)); .)
						}  			(. current->remove("\""); .)
						.

/*------------------------------------------------------------------------*/
VariableDecl<QString name> = (. QString* current = new QString(); .)
			( ident 	(. *current = coco_qstring_create(t->val); 
						   (data->variable(*current)) ? data->addVariableWithValue( name, data->variableValue(*current) ) : errors->Error(QString("Variable %1 not specified in this scope.").arg(*current));
						.)
			| String<current> 	(. data->addVariableWithValue( name, *current ); .)
			| number 			(. *current = coco_qstring_create(t->val);data->addVariableWithValue( name, *current ); .)
			| hexnumber 		(. *current = coco_qstring_create(t->val);data->addVariableWithValue( name, *current ); .)
			) 					(. (current->isEmpty())?errors->m_com->out(QString("no val for %1").arg(name)):errors->m_com->out( name + "=" + *current ); 
								   delete current; .)
			.

/*------------------------------------------------------------------------*/
VariableConcenate<QString name> = 	(. QString* current = new QString();errors->m_com->out(QString("in concenate")); .)
			( ident				  	(. *current = coco_qstring_create(t->val);
									   (data->variable(*current)) ? data->addVariableWithValue( name, data->variableValue(name) + data->variableValue(*current) ) : errors->Error(QString("Variable %1 not specified in this scope.").arg(*current));
									.)
			| String<current> 	(. data->addVariableWithValue( name, data->variableValue(name) + *current ); .)
			| number 			(. *current = coco_qstring_create(t->val);data->addVariableWithValue( name, data->variableValue(name) + *current ); .)
			| hexnumber 		(. *current = coco_qstring_create(t->val);data->addVariableWithValue( name, data->variableValue(name) + *current ); .)
			)					(. (current->isEmpty())?errors->m_com->out(QString("no val for %1").arg(name)):errors->m_com->out( name + "=" + data->variableValue(name) );
								   delete current; .)
			.
/*------------------------------------------------------------------------*/
ParameterDecl<TSFunction* f> = 	(. QStringList l; .)
			"(" ( 
			{ 
			ident 				(. l << coco_qstring_create(t->val); .)
			( "," | ")" ) 
			} | ")" ) 			(. f->setParameters( l ); .)
			.

/*------------------------------------------------------------------------*/
FunctionBody<TSFunction* f> =  (. QStringList l; .)
			ident (. l << coco_qstring_create(t->val);errors->m_com->out( QString("body") ); .) 
			{ 
			intent (. errors->m_com->out( QString("body tab") ); .)
			ident  (. l << coco_qstring_create(t->val);errors->m_com->out( QString("body ").append( coco_qstring_create(t->val) )); .)
			} 	(. f->setBody( l );errors->m_com->out( QString("end of body") ); .)
			.
			
/*------------------------------------------------------------------------*/
FunctionDecl<QString name> = 	(. TSFunction *f = new TSFunction(); f->setName( name ); .)
			ParameterDecl<f> 
			"->" 
			FunctionBody<f> (. errors->m_com->out( QString( "end of function") );
							   data->addFunction( f ); .)
			.

/*------------------------------------------------------------------------*/
ObjectMemDecl<TSObject* o> = 		(. QString* current = new QString(); .)
				ident				(. QString name = coco_qstring_create(t->val);
									   errors->m_com->out( QString( "it's an ts object member") ); .)
				":" 
				( 
				ident 				(. *current = coco_qstring_create(t->val); .)
				| String<current>   
				) 					(. o->addMemberWithValue( name, *current ); delete current; .)
				.

/*------------------------------------------------------------------------*/
ObjectDecl<QString name> =  (. TSObject* o = new TSObject(name); .)
			"{" 			(. errors->m_com->out( QString( "it's an ts object") ); .)
			{ 
			{intent} ObjectMemDecl<o> 
			} 
			"}" 			(. data->addObject( o );errors->m_com->out( QString( "end of ts object") ); .)
			.

/*------------------------------------------------------------------------*/
Object = ident (. QString name = coco_qstring_create( t->val ); .)
		( "=" 
			( VariableDecl<name> (. errors->m_com->out( QString( "was a variable") ); .)
			| FunctionDecl<name> (. errors->m_com->out( QString( "was a function") ); .)
			| ObjectDecl<name>   (. errors->m_com->out( QString( "was a ts object") ); .)
			)
		| "+="
			VariableConcenate<name>
		)
		.	

/*------------------------------------------------------------------------*/
TSCompiler
= "TrivialScript" VersionNum 
	{ Object } .

END TSCompiler.
